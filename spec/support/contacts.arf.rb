# frozen_string_literal: true

# Code generated by arfc. DO NOT EDIT.

module Contacts
  # Contact represent a single person in the address list.
  class Contact < Arf::RPC::Struct
    arf_struct_id "org.example.contacts/contact"
    field 0, :id, :int64, optional: true
    field 1, :name, :string
    field 2, :surname, :string
    field 3, :company, "Company", optional: true
    field 4, :emails, ArrayType[:string]
    field 5, :telephones, ArrayType["Telephone"].bind(self)
    field 6, :additional_info, MapType[:string, :string].bind(self)

    class Telephone < Arf::RPC::Struct
      arf_struct_id "org.example.contacts/contact/telephone"
      field 0, :kind, "Kind"
      field 1, :number, :string

      class Kind < Arf::RPC::Enum
        option mobile: 0
        option work: 1
        option home: 2
        option house: 2
      end
    end
  end

  # Company represents a company in which a person
  # works at.
  class Company < Arf::RPC::Struct
    arf_struct_id "org.example.contacts/company"
    field 0, :name, :string
    field 1, :website_address, :string
  end

  # GetContactRequest represents a request to obtain
  # a specific contact through a given id.
  class GetContactRequest < Arf::RPC::Struct
    arf_struct_id "org.example.contacts/get_contact_request"
    field 0, :id, :int64
  end

  # GetContactResponse represents the result of a GetContactRequest.
  # An absent `contact` indicates that no contact under the provided id exists.
  class GetContactResponse < Arf::RPC::Struct
    arf_struct_id "org.example.contacts/get_contact_response"
    field 0, :contact, "Contact", optional: true
  end

  class ContactsService < Arf::RPC::ServiceBase
    arf_service_id "org.example.contacts/contacts_service"
    rpc :upsert_contact,
        inputs: { c: "Contact" }
    rpc :list_contacts,
        outputs: [OutputStream["Contact"]]
    rpc :get_contact,
        inputs: { r: "GetContactRequest" },
        outputs: ["GetContactResponse"]
    rpc :find_by_name_or_email,
        inputs: { name: :string, email: :string },
        outputs: ["Contact"]
    rpc :divide,
        inputs: { a: :float32, b: :float32 },
        outputs: %i[float32 float32]
  end

  class ContactsServiceClient < Arf::RPC::ClientBase
    arf_service_id "org.example.contacts/contacts_service"
    rpc :upsert_contact,
        inputs: { c: "Contact" }
    rpc :list_contacts,
        outputs: [OutputStream["Contact"]]
    rpc :get_contact,
        inputs: { r: "GetContactRequest" },
        outputs: ["GetContactResponse"]
    rpc :find_by_name_or_email,
        inputs: { name: :string, email: :string },
        outputs: ["Contact"]
    rpc :divide,
        inputs: { a: :float32, b: :float32 },
        outputs: %i[float32 float32]
  end
end
