# frozen_string_literal: true

# This file exercises contacts.arf.rb, generated by arfc.

RSpec.describe "Contacts.arf" do
  context "Contact::Telephone" do
    it "initializes" do
      Contacts::Contact::Telephone.new(
        number: "555-1013",
        kind: :work
      )
    end

    it "updates" do
      telephone = Contacts::Contact::Telephone.new
      telephone.number = "555-1013"
      telephone.kind = :work
    end

    it "encodes and decodes" do
      telephone = Contacts::Contact::Telephone.new
      telephone.number = "555-1013"
      telephone.kind = :work
      data = Arf::Proto.encode(telephone)
      t = Arf::Proto.decode(StringIO.new(data))
      expect(t).to eq telephone
    end
  end

  context "Contact" do
    let(:original) do
      Contacts::Contact.new(
        name: "Dana",
        surname: "Scully",
        company: {
          name: "FBI",
          website_address: "https://fbi.gov"
        },
        emails: ["danas@example.org"],
        telephones: [
          { number: "555-1013", kind: :work }
        ],
        additional_info: {
          DOB: "February 23, 1964"
        }
      )
    end
    it "initializes" do
      original
    end

    it "updates" do
      contact = Contacts::Contact.new

      contact.name = "Dana"
      contact.surname = "Scully"
      contact.company = {
        name: "FBI",
        website_address: "https://fbi.gov"
      }
      contact.emails = ["danas@example.org"]
      contact.telephones = [
        { number: "555-1013", kind: :work }
      ]
      contact.additional_info = {
        DOB: "February 23, 1964"
      }

      expect(contact).to eq(original)
    end

    it "encodes and decodes" do
      data = Arf::Proto.encode(original)
      t = Arf::Proto.decode(StringIO.new(data))
      expect(t).to eq original
    end

    it "hashifies a struct" do
      original.to_h
    end
  end

  context "Service" do
    subject { Arf::Server.new }
    before { subject.run }

    after do
      subject.shutdown
      ContactsImpl.reset_state!
    end

    let(:client) { Arf.connect("127.0.0.1", 2730) }
    let(:sample) { Contacts::ContactsServiceClient.new(client) }
    let(:state) { ContactsImpl.state }

    let(:dana) do
      {
        name: "Dana",
        surname: "Scully",
        company: {
          name: "FBI",
          website_address: "https://fbi.gov"
        },
        emails: ["danas@example.org"],
        telephones: [
          { number: "555-1013", kind: :work }
        ],
        additional_info: {
          DOB: "February 23, 1964"
        }
      }
    end

    it "Divides" do
      r = sample.divide(2, 2)
      expect(r.params).to eq [1.0, 0.0]
    end

    it "upserts a contact" do
      r = sample.upsert_contact(dana)
      expect(r).to be_success
      expect(state.contacts.length).to eq 1
    end

    it "lists contacts" do
      r = sample.upsert_contact(dana)
      expect(r).to be_success
      r = sample.upsert_contact({ name: "Fefo" })
      expect(r).to be_success

      r = sample.list_contacts
      expect(r).to be_success
      v = r.recv
      expect(v.name).to eq "Dana"
      v = r.recv
      expect(v.name).to eq "Fefo"
      v = r.recv
      expect(v).to be_nil
    end

    it "gets a contact" do
      r = sample.upsert_contact(dana)
      expect(r).to be_success
      r = sample.get_contact({ id: 1 })
      expect(r).to be_success
      expect(r.params).not_to be_nil
    end
  end
end
